import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)import socket
import os
import time
import argparse
from tqdm import tqdm

def send_file(filename, host='127.0.0.1', port=12345, chunk_size=1024):
    """
    Sends a file in chunks to test network flow reconstruction.
    
    Args:
        filename: Path to the file to send
        host: Target host (default: localhost)
        port: Target port (default: 12345)
        chunk_size: Size of chunks to send in bytes (default: 1KB)
    """
    # Create TCP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        sock.connect((host, port))
        
        # Get file size
        file_size = os.path.getsize(filename)
        
        # Send file size first
        sock.send(str(file_size).encode())
        time.sleep(0.1)  # Small delay to ensure size is received
        
        # Open and send file in chunks
        with open(filename, 'rb') as f:
            # Setup progress bar
            pbar = tqdm(total=file_size, unit='B', unit_scale=True, 
                       desc=f'Sending {filename}')
            
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                
                sock.send(chunk)
                pbar.update(len(chunk))
                
                # Small delay between chunks to simulate network conditions
                time.sleep(0.001)
            
            pbar.close()
            
    except ConnectionRefusedError:
        print("Connection failed - make sure the receiving script is running")
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send a file in chunks over TCP')
    parser.add_argument('filename', help='File to send')
    parser.add_argument('--host', default='127.0.0.1', help='Target host')
    parser.add_argument('--port', type=int, default=12345, help='Target port')
    parser.add_argument('--chunk-size', type=int, default=1024, 
                       help='Size of chunks in bytes')
    
    args = parser.parse_args()
    send_file(args.filename, args.host, args.port, args.chunk_size)